-- File generated by the BNF Converter (bnfc 2.9.5).

{-# LANGUAGE DeriveTraversable #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE GeneralizedNewtypeDeriving #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE PatternSynonyms #-}

-- | The abstract syntax of language .

module Abs where

import Prelude (Integer, String)
import qualified Prelude as C
  ( Eq, Ord, Show, Read
  , Functor, Foldable, Traversable
  , Int, Maybe(..)
  )
import qualified Data.String

type Program = Program' BNFC'Position
data Program' a = Program a [Def' a]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Def = Def' BNFC'Position
data Def' a
    = TDef a LIdent [TypeArg' a] [TypeArg' a]
    | DFact a (DeclHeader' a)
    | DRule a (DeclHeader' a) [Stmt' a]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type TypeArg = TypeArg' BNFC'Position
data TypeArg' a
    = TALit a UIdent
    | TAGen a LIdent
    | TAList a (TypeArg' a)
    | TAApp a (TypeArg' a) [TypeArg' a]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type DeclHeader = DeclHeader' BNFC'Position
data DeclHeader' a = DHeader a LIdent [Term' a]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Stmt = Stmt' BNFC'Position
data Stmt' a
    = STrue a
    | SFalse a
    | SCall a LIdent [Term' a]
    | SAss a UIdent (Term' a)
    | SIs a UIdent (IExp' a)
    | SRel a (IExp' a) (RelOp' a) (IExp' a)
    | SMod a (Term' a) (Mod' a) LIdent [Term' a]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Mod = Mod' BNFC'Position
data Mod' a = MExt a | MCollect a
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type IExp = IExp' BNFC'Position
data IExp' a
    = IEVar a UIdent
    | IELit a Integer
    | IENeg a (IExp' a)
    | IEMul a (IExp' a) (MulOp' a) (IExp' a)
    | IEAdd a (IExp' a) (AddOp' a) (IExp' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type AddOp = AddOp' BNFC'Position
data AddOp' a = Plus a | Minus a
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type MulOp = MulOp' BNFC'Position
data MulOp' a = Times a | Div a | Mod a
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type RelOp = RelOp' BNFC'Position
data RelOp' a = LTH a | LE a | GTH a | GE a | EQU a | NE a
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Term = Term' BNFC'Position
data Term' a
    = TStr a String
    | TInt a Integer
    | TVar a UIdent
    | TIgnore a
    | TList a [Term' a]
    | TCons a (Term' a) (Term' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

newtype UIdent = UIdent String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype LIdent = LIdent String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

-- | Start position (line, column) of something.

type BNFC'Position = C.Maybe (C.Int, C.Int)

pattern BNFC'NoPosition :: BNFC'Position
pattern BNFC'NoPosition = C.Nothing

pattern BNFC'Position :: C.Int -> C.Int -> BNFC'Position
pattern BNFC'Position line col = C.Just (line, col)

-- | Get the start position of something.

class HasPosition a where
  hasPosition :: a -> BNFC'Position

instance HasPosition Program where
  hasPosition = \case
    Program p _ -> p

instance HasPosition Def where
  hasPosition = \case
    TDef p _ _ _ -> p
    DFact p _ -> p
    DRule p _ _ -> p

instance HasPosition TypeArg where
  hasPosition = \case
    TALit p _ -> p
    TAGen p _ -> p
    TAList p _ -> p
    TAApp p _ _ -> p

instance HasPosition DeclHeader where
  hasPosition = \case
    DHeader p _ _ -> p

instance HasPosition Stmt where
  hasPosition = \case
    STrue p -> p
    SFalse p -> p
    SCall p _ _ -> p
    SAss p _ _ -> p
    SIs p _ _ -> p
    SRel p _ _ _ -> p
    SMod p _ _ _ _ -> p

instance HasPosition Mod where
  hasPosition = \case
    MExt p -> p
    MCollect p -> p

instance HasPosition IExp where
  hasPosition = \case
    IEVar p _ -> p
    IELit p _ -> p
    IENeg p _ -> p
    IEMul p _ _ _ -> p
    IEAdd p _ _ _ -> p

instance HasPosition AddOp where
  hasPosition = \case
    Plus p -> p
    Minus p -> p

instance HasPosition MulOp where
  hasPosition = \case
    Times p -> p
    Div p -> p
    Mod p -> p

instance HasPosition RelOp where
  hasPosition = \case
    LTH p -> p
    LE p -> p
    GTH p -> p
    GE p -> p
    EQU p -> p
    NE p -> p

instance HasPosition Term where
  hasPosition = \case
    TStr p _ -> p
    TInt p _ -> p
    TVar p _ -> p
    TIgnore p -> p
    TList p _ -> p
    TCons p _ _ -> p

