{-# GHC_OPTIONS -w #-}
{-# Language TemplateHaskell, QuasiQuotes #-}
-- File generated by the BNF Converter (bnfc 2.9.5).

-- | Program to test parser.

module Main where

import Prelude hiding (elem, last, repeat)
import Control.Monad    
import Control.Monad.Logic
import Data.List hiding (elem, last, repeat)
import Control.Applicative 
import Data.Tuple

import Abs   ( Program )
import Lex   ( Token, mkPosToken )
import Par   ( pProgram, myLexer )
import Print ( Print, printTree )
import Skel  ()
import QQ (hp)

main :: IO ()
main = undefined


{- Relacyjna klasyka -}
-- [hp|
--   % parent(P, C)
--   .decl parent(|String, String).
--   parent("Jozek", "Basia").
--
--   .decl grandparent(|String, String).
--   grandparent(G, C) :- 
--     parent(G, P),
--     parent(P, C).
--
--   .decl gpQuery(String|String).
--   gpQuery(G, C) :- grandparent(G, C).
-- |]
{- gpQuery (MkSolo "Stasiu") -}




{- Prosty graf -}
[hp|
  .decl node(|Int).
  node(1).
  node(2).
  node(3).
  node(4).
  node(5).
  node(6).
  node(7).

  .decl edge(|Int, Int).
  edge(1, 2).
  edge(2, 3).
  edge(3, 4).
  edge(4, 5).
  edge(4, 6).
  edge(1, 4).

  .decl reach(Int|Int).
  reach(X, X) :- node(X).
  reach(X, Y) :- 
    edge(X, Z),
    reach(Z, Y).

  .decl trails(Int,Int|[Int]).
  trails(X, X, []).
  trails(X, Y, (H:T)) :-
    edge(X, H),
    trails(H, Y, T).

  .decl trailSum(Int,Int|Int).
  trailSum(X, Y, S) :-
    trails(X, Y, Trail),
    S <[ext]- sum(Trail).
|]
{-  -}



{- Podstawowe listy -}
-- [hp|
-- .decl last(a, [a]|).
-- last(X, [X]).
-- last(X, (_:L)) :- last(X, L).
--
-- .decl elem(a, [a]|).
-- elem(X, (X:_)).
-- elem(X, (_:L)) :- elem(X, L).
-- |]

{- Podstawowa arytmetyka -}
-- [hp|
--   .decl add(Int,Int|Int).
--   add(A, B, C) :- C is A + B.
--
--   .decl qa(Int,Int,Int|).
--   qa(A,B,C) :- add(A, B, C).
-- |]

{- Podstawowe relacje -}
-- [hp|
--   .decl geq(Int,Int|).
--   geq(A, B) :- A >= B.
-- |]

{- Listy -}
-- [hp|
--   .decl hd([a]|a).
--   hd((X:_), X).
--
--   .decl ln([a]|Int).
--   ln([], 0).
--   ln((_:T), Len) :- 
--     ln(T, Len0),
--     Len is Len0 + 1.
--
--   .decl repeat(Int, a | [a]).
--   repeat(0, _, []).
--   repeat(N, X, (X:L)) :-
--     N > 0,
--     N1 is N - 1,
--     repeat(N1, X, L).
--
--   .decl q(a|a,a).
--   q(A, B, C) :- repeat(4, A, (A:(B:(C:_)))).
-- |]

-- [hp|
--   .decl beforeOne([Int]|Int).
--   beforeOne((X:(1:_)), X).
--   beforeOne((_:T), X) :-
--     beforeOne(T, X).
-- |]
