-- File generated by the BNF Converter (bnfc 2.9.5).

{-# LANGUAGE CPP #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE LambdaCase #-}
#if __GLASGOW_HASKELL__ <= 708
{-# LANGUAGE OverlappingInstances #-}
#endif

-- | Pretty-printer for Print.

module Print where

import Prelude
  ( ($), (.)
  , Bool(..), (==), (<)
  , Int, Integer, Double, (+), (-), (*)
  , String, (++)
  , ShowS, showChar, showString
  , all, elem, foldr, id, map, null, replicate, shows, span
  )
import Data.Char ( Char, isSpace )
import qualified Abs

-- | The top-level printing method.

printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 False (map ($ "") $ d []) ""
  where
  rend
    :: Int        -- ^ Indentation level.
    -> Bool       -- ^ Pending indentation to be output before next character?
    -> [String]
    -> ShowS
  rend i p = \case
      "["      :ts -> char '[' . rend i False ts
      "("      :ts -> char '(' . rend i False ts
      "{"      :ts -> onNewLine i     p . showChar   '{'  . new (i+1) ts
      "}" : ";":ts -> onNewLine (i-1) p . showString "};" . new (i-1) ts
      "}"      :ts -> onNewLine (i-1) p . showChar   '}'  . new (i-1) ts
      [";"]        -> char ';'
      ";"      :ts -> char ';' . new i ts
      t  : ts@(s:_) | closingOrPunctuation s
                   -> pending . showString t . rend i False ts
      t        :ts -> pending . space t      . rend i False ts
      []           -> id
    where
    -- Output character after pending indentation.
    char :: Char -> ShowS
    char c = pending . showChar c

    -- Output pending indentation.
    pending :: ShowS
    pending = if p then indent i else id

  -- Indentation (spaces) for given indentation level.
  indent :: Int -> ShowS
  indent i = replicateS (2*i) (showChar ' ')

  -- Continue rendering in new line with new indentation.
  new :: Int -> [String] -> ShowS
  new j ts = showChar '\n' . rend j True ts

  -- Make sure we are on a fresh line.
  onNewLine :: Int -> Bool -> ShowS
  onNewLine i p = (if p then id else showChar '\n') . indent i

  -- Separate given string from following text by a space (if needed).
  space :: String -> ShowS
  space t s =
    case (all isSpace t, null spc, null rest) of
      (True , _   , True ) -> []             -- remove trailing space
      (False, _   , True ) -> t              -- remove trailing space
      (False, True, False) -> t ++ ' ' : s   -- add space if none
      _                    -> t ++ s
    where
      (spc, rest) = span isSpace s

  closingOrPunctuation :: String -> Bool
  closingOrPunctuation [c] = c `elem` closerOrPunct
  closingOrPunctuation _   = False

  closerOrPunct :: String
  closerOrPunct = ")],;"

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- | The printer class does the job.

class Print a where
  prt :: Int -> a -> Doc

instance {-# OVERLAPPABLE #-} Print a => Print [a] where
  prt i = concatD . map (prt i)

instance Print Char where
  prt _ c = doc (showChar '\'' . mkEsc '\'' c . showChar '\'')

instance Print String where
  prt _ = printString

printString :: String -> Doc
printString s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q = \case
  s | s == q -> showChar '\\' . showChar s
  '\\' -> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  s -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j < i then parenth else id

instance Print Integer where
  prt _ x = doc (shows x)

instance Print Double where
  prt _ x = doc (shows x)

instance Print Abs.UIdent where
  prt _ (Abs.UIdent i) = doc $ showString i
instance Print Abs.LIdent where
  prt _ (Abs.LIdent i) = doc $ showString i
instance Print (Abs.Program' a) where
  prt i = \case
    Abs.Program _ defs -> prPrec i 0 (concatD [prt 0 defs])

instance Print [Abs.Def' a] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x, doc (showString ".")]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString "."), prt 0 xs]

instance Print (Abs.Def' a) where
  prt i = \case
    Abs.TDef _ lident typeargs1 typeargs2 -> prPrec i 0 (concatD [doc (showString ".decl"), prt 0 lident, doc (showString "("), prt 0 typeargs1, doc (showString "|"), prt 0 typeargs2, doc (showString ")")])
    Abs.DFact _ declheader -> prPrec i 0 (concatD [prt 0 declheader])
    Abs.DRule _ declheader stmts -> prPrec i 0 (concatD [prt 0 declheader, doc (showString ":-"), prt 0 stmts])

instance Print (Abs.TypeArg' a) where
  prt i = \case
    Abs.TALit _ uident -> prPrec i 0 (concatD [prt 0 uident])
    Abs.TAGen _ lident -> prPrec i 0 (concatD [prt 0 lident])
    Abs.TAList _ typearg -> prPrec i 0 (concatD [doc (showString "["), prt 0 typearg, doc (showString "]")])
    Abs.TATup _ typeargs -> prPrec i 0 (concatD [doc (showString "("), prt 0 typeargs, doc (showString ")")])
    Abs.TAApp _ typearg typeargs -> prPrec i 0 (concatD [prt 0 typearg, doc (showString "("), prt 0 typeargs, doc (showString ")")])

instance Print [Abs.TypeArg' a] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print (Abs.DeclHeader' a) where
  prt i = \case
    Abs.DHeader _ lident terms -> prPrec i 0 (concatD [prt 0 lident, doc (showString "("), prt 0 terms, doc (showString ")")])

instance Print (Abs.Stmt' a) where
  prt i = \case
    Abs.STrue _ -> prPrec i 0 (concatD [doc (showString "True")])
    Abs.SFalse _ -> prPrec i 0 (concatD [doc (showString "False")])
    Abs.SCall _ lident terms -> prPrec i 0 (concatD [prt 0 lident, doc (showString "("), prt 0 terms, doc (showString ")")])
    Abs.SAss _ uident term -> prPrec i 0 (concatD [prt 0 uident, doc (showString "="), prt 0 term])
    Abs.SIs _ uident iexp -> prPrec i 0 (concatD [prt 0 uident, doc (showString "is"), prt 0 iexp])
    Abs.SRel _ iexp1 relop iexp2 -> prPrec i 0 (concatD [prt 0 iexp1, prt 0 relop, prt 0 iexp2])
    Abs.SMod _ modifier terms1 lident terms2 -> prPrec i 0 (concatD [prt 0 modifier, doc (showString "("), prt 0 terms1, doc (showString ")"), doc (showString ":"), prt 0 lident, doc (showString "("), prt 0 terms2, doc (showString ")")])

instance Print (Abs.Modifier' a) where
  prt i = \case
    Abs.MExt _ -> prPrec i 0 (concatD [doc (showString "ext")])
    Abs.MCollect _ -> prPrec i 0 (concatD [doc (showString "collect")])
    Abs.MOnce _ -> prPrec i 0 (concatD [doc (showString "once")])

instance Print (Abs.IExp' a) where
  prt i = \case
    Abs.IEVar _ uident -> prPrec i 3 (concatD [prt 0 uident])
    Abs.IELit _ n -> prPrec i 3 (concatD [prt 0 n])
    Abs.IENeg _ iexp -> prPrec i 2 (concatD [doc (showString "-"), prt 3 iexp])
    Abs.IEMul _ iexp1 mulop iexp2 -> prPrec i 1 (concatD [prt 1 iexp1, prt 0 mulop, prt 2 iexp2])
    Abs.IEAdd _ iexp1 addop iexp2 -> prPrec i 0 (concatD [prt 0 iexp1, prt 0 addop, prt 1 iexp2])

instance Print (Abs.AddOp' a) where
  prt i = \case
    Abs.Plus _ -> prPrec i 0 (concatD [doc (showString "+")])
    Abs.Minus _ -> prPrec i 0 (concatD [doc (showString "-")])

instance Print (Abs.MulOp' a) where
  prt i = \case
    Abs.Times _ -> prPrec i 0 (concatD [doc (showString "*")])
    Abs.Div _ -> prPrec i 0 (concatD [doc (showString "/")])
    Abs.Mod _ -> prPrec i 0 (concatD [doc (showString "%")])

instance Print (Abs.RelOp' a) where
  prt i = \case
    Abs.LTH _ -> prPrec i 0 (concatD [doc (showString "<")])
    Abs.LE _ -> prPrec i 0 (concatD [doc (showString "<=")])
    Abs.GTH _ -> prPrec i 0 (concatD [doc (showString ">")])
    Abs.GE _ -> prPrec i 0 (concatD [doc (showString ">=")])
    Abs.EQU _ -> prPrec i 0 (concatD [doc (showString "==")])
    Abs.NE _ -> prPrec i 0 (concatD [doc (showString "!=")])

instance Print (Abs.Term' a) where
  prt i = \case
    Abs.TStr _ str -> prPrec i 0 (concatD [printString str])
    Abs.TInt _ n -> prPrec i 0 (concatD [prt 0 n])
    Abs.TVar _ uident -> prPrec i 0 (concatD [prt 0 uident])
    Abs.TIgnore _ -> prPrec i 0 (concatD [doc (showString "_")])
    Abs.TList _ terms -> prPrec i 0 (concatD [doc (showString "["), prt 0 terms, doc (showString "]")])
    Abs.TCons _ term1 term2 -> prPrec i 0 (concatD [doc (showString "("), prt 0 term1, doc (showString ":"), prt 0 term2, doc (showString ")")])
    Abs.TTup _ terms -> prPrec i 0 (concatD [doc (showString "("), prt 0 terms, doc (showString ")")])
    Abs.TConstr _ uident terms -> prPrec i 0 (concatD [prt 0 uident, doc (showString "("), prt 0 terms, doc (showString ")")])

instance Print [Abs.Term' a] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print [Abs.Stmt' a] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]
