-- File generated by the BNF Converter (bnfc 2.9.5).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module Skel where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified Abs

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transUIdent :: Abs.UIdent -> Result
transUIdent x = case x of
  Abs.UIdent string -> failure x

transLIdent :: Abs.LIdent -> Result
transLIdent x = case x of
  Abs.LIdent string -> failure x

transProgram :: Show a => Abs.Program' a -> Result
transProgram x = case x of
  Abs.Program _ defs -> failure x

transDef :: Show a => Abs.Def' a -> Result
transDef x = case x of
  Abs.TDef _ lident typeargs1 typeargs2 -> failure x
  Abs.DFact _ declheader -> failure x
  Abs.DRule _ declheader stmts -> failure x

transTypeArg :: Show a => Abs.TypeArg' a -> Result
transTypeArg x = case x of
  Abs.TALit _ uident -> failure x
  Abs.TAGen _ lident -> failure x
  Abs.TAList _ typearg -> failure x
  Abs.TAApp _ typearg typeargs -> failure x

transDeclHeader :: Show a => Abs.DeclHeader' a -> Result
transDeclHeader x = case x of
  Abs.DHeader _ lident terms -> failure x

transStmt :: Show a => Abs.Stmt' a -> Result
transStmt x = case x of
  Abs.STrue _ -> failure x
  Abs.SFalse _ -> failure x
  Abs.SCall _ lident terms -> failure x
  Abs.SAss _ uident term -> failure x
  Abs.SIs _ uident iexp -> failure x

transIExp :: Show a => Abs.IExp' a -> Result
transIExp x = case x of
  Abs.IEVar _ uident -> failure x
  Abs.IELit _ integer -> failure x
  Abs.IENeg _ iexp -> failure x
  Abs.IEMul _ iexp1 mulop iexp2 -> failure x
  Abs.IEAdd _ iexp1 addop iexp2 -> failure x

transExpr :: Show a => Abs.Expr' a -> Result
transExpr x = case x of

transAddOp :: Show a => Abs.AddOp' a -> Result
transAddOp x = case x of
  Abs.Plus _ -> failure x
  Abs.Minus _ -> failure x

transMulOp :: Show a => Abs.MulOp' a -> Result
transMulOp x = case x of
  Abs.Times _ -> failure x
  Abs.Div _ -> failure x
  Abs.Mod _ -> failure x

transTerm :: Show a => Abs.Term' a -> Result
transTerm x = case x of
  Abs.TStr _ string -> failure x
  Abs.TInt _ integer -> failure x
  Abs.TVar _ uident -> failure x
  Abs.TIgnore _ -> failure x
  Abs.TList _ terms -> failure x
  Abs.TCons _ term1 term2 -> failure x
